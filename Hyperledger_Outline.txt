Hyperledger

Online Offical Documentation
https://hyperledger-fabric.readthedocs.io/en/release-1.2/

Hyperledger Fabric - Offical Document PDF
https://readthedocs.org/projects/hyperledger-fabric/downloads/pdf/latest/

Hyperledger Composer - Offical Document
https://hyperledger.github.io/composer/unstable/introduction/introduction.html

Hyperledger Composer Practice
https://www.ibm.com/developerworks/cloud/library/cl-model-test-your-blockchain-network-with-hyperledger-composer-playground/index.html

Blockchain Development on Hyperledger Fabric using Composer - Video course
https://www.udemy.com/hyperledger/
Download:
https://drive.google.com/open?id=1MjGrACk_FiAeoYsh-Vb3CBYbYXUWiAxQ

Hyperledger - Blockchain Technologies for Business
https://www.youtube.com/watch?v=7EpPrSJtqZU&list=PLjsqymUqgpSRXC9ywNIVUUoGXelQa4olO&index=1

Hyperledger Fabric - build first network
https://www.youtube.com/watch?v=MPNkUqOKhVE&list=PLjsqymUqgpSTGC4L6ULHCB_Mqmy43OcIh&index=1


------------------------------------
Why Blockchain for Enterprise
For enterprise use, we need to consider the following requirements: 
• Participants must be identified/identifiable
• Networks need to be permissioned
• High transaction throughput performance
• Low latency of transaction confirmation
• Privacy and confidentiality of transactions and data pertaining to business transactions

What is Hyperledger
The Linux Foundation founded the Hyperledger project in 2015 to advance cross-industry blockchain technologies.
Rather than declaring a single blockchain standard, it encourages a collaborative approach to developing blockchain technologies via a community process, with intellectual property rights that encourage open development and the
adoption of key standards over time.


------------------------------------
Projects under "Hyperledger Umbrella"
https://www.hyperledger.org/projects
https://www.hyperledger.org/wp-content/uploads/2018/04/Hyperledger_Arch_WG_Paper_2_SmartContracts.pdf

Business Blockchain Frameworks Hosted with Hyperledger

Fabric
Intended as a foundation for developing applications or solutions with a modular architecture, Hyperledger Fabric allows components, such as consensus and membership services, to be plug-and-play.

Burrow
Hyperledger Burrow is a permissionable smart contract machine. The first of its kind when released in December, 2014, Burrow provides a modular blockchain client with a permissioned smart contract interpreter built in part to the specification of the Ethereum Virtual Machine (EVM).

Iroha
Hyperledger Iroha is a business blockchain framework designed to be simple and easy to incorporate into infrastructural projects requiring distributed ledger technology.

Sawtooth
Hyperledger Sawtooth is a modular platform for building, deploying, and running distributed ledgers. Hyperledger Sawtooth includes a novel consensus algorithm, Proof of Elapsed Time (PoET), which targets large distributed validator populations with minimal resource consumption.

Indy
Hyperledger Indy is a distributed ledger, purpose-built for decentralized identity. It provides tools, libraries, and reusable components for creating and using independent digital identities rooted on blockchains or other distributed ledgers for interoperability.

Hyperledger Tools
Composer
Hyperledger Composer is a collaboration tool for building blockchain business networks, accelerating the development of smart contracts and their deployment across a distributed ledger.

Caliper
Hyperledger Caliper is a blockchain benchmark tool, which allows users to measure the performance of a specific blockchain implementation with a set of predefined use cases.

Cello
Hyperledger Cello aims to bring the on-demand “as-a-service” deployment model to the blockchain ecosystem to reduce the effort required for creating, managing and terminating blockchains.

Explorer
Hyperledger Explorer can view, invoke, deploy or query blocks, transactions and associated data, network information, chain codes and transaction families, as well as any other relevant information stored in the ledger.

Quilt
Hyperledger Quilt offers interoperability between ledger systems by implementing ILP, which is primarily a payments protocol and is designed to transfer value across distributed ledgers and non-distributed ledgers.


------------------------------------
What is Hyperledger Fabric
Hyperledger Fabric is one of the blockchain projects within Hyperledger, an open source enterprise-grade permissioned distributed ledger technology (DLT) platform, designed for use in enterprise contexts. Like other blockchain technologies, it has a ledger, uses smart contracts, and is a system by which participants manage their transactions.


------------------------------------
Key Features

Hyperledger Fabric has been specifically architected to have a modular architecture. Whether it is pluggable consensus, pluggable identity management protocols such as LDAP or OpenID Connect, key management protocols or cryptographic libraries, the platform has been designed at its core to be configured to meet the diversity of enterprise use case requirements.

Modularity
At a high level, Fabric is comprised of the following modular components:
• A pluggable ordering service establishes consensus on the order of transactions and then broadcasts blocks to peers.
• A pluggable membership service provider is responsible for associating entities in the network with crypto- graphic identities.
• An optional peer-to-peer gossip service disseminates the blocks output by ordering service to other peers.
• Smart contracts (“chaincode”) run within a container environment (e.g. Docker) for isolation. They can be
written in standard programming languages but do not have direct access to the ledger state.
• The ledger can be configured to support a variety of DBMSs.
• A pluggable endorsement and validation policy enforcement that can be independently configured per applica- tion.
There is fair agreement in the industry that there is no “one blockchain to rule them all”. Hyperledger Fabric can be configured in multiple ways to satisfy the diverse solution requirements for multiple industry use cases.

Smart Contracts (aka Chaincode)
It is the business logic of a blockchain application.
Most existing smart-contract capable blockchain platforms follow an order-execute architecture in which the consensus protocol:
• validates and orders transactions then propagates them to all peer nodes,
• each peer then executes the transactions sequentially.
Smart contracts executing in a blockchain that operates with the order-execute architecture must be deterministic; otherwise, consensus might never be reached. To address the non-determinism issue, many platforms require that the smart contracts be written in a non-standard, or domain-specific language (such as Solidity) so that non-deterministic operations can be eliminated. This hinders wide-spread adoption because it requires developers writing smart contracts to learn a new language and may lead to programming errors.
Further, since all transactions are executed sequentially by all nodes, performance and scale is limited. The fact that the smart contract code executes on every node in the system demands that complex measures be taken to protect the overall system from potentially malicious contracts in order to ensure resiliency of the overall system.

Fabric introduces a new architecture for transactions that we call execute-order-validate. It addresses the resiliency, flexibility, scalability, performance and confidentiality challenges faced by the order-execute model by separating the transaction flow into three steps:
• execute a transaction and check its correctness, thereby endorsing it,
• order transactions via a (pluggable) consensus protocol, and
• validate transactions against an application-specific endorsement policy before committing them to the ledger
In Fabric, an application-specific endorsement policy specifies which peer nodes, or how many of them, need to vouch for the correct execution of a given smart contract. Thus, each transaction need only be executed (endorsed) by the subset of the peer nodes necessary to satisfy the transaction’s endorsement policy. This allows for parallel execution increasing overall performance and scale of the system. This first phase also eliminates any non-determinism, as inconsistent results can be filtered out before ordering.
Because we have eliminated non-determinism, Fabric is the first blockchain technology that enables use of standard programming languages. In the 1.1.0 release, smart contracts can be written in either Go or Node.js, while there are plans to support other popular languages including Java in subsequent releases.

Privacy and Confidentiality
Hyperledger Fabric, being a permissioned platform, enables confidentiality through its channel architecture. Basically, participants on a Fabric network can establish a “channel” between the subset of participants that should be granted visibility to a particular set of transactions. Think of this as a network overlay. Thus, only those nodes that participate in a channel have access to the smart contract (chaincode) and data transacted, preserving the privacy and confidentiality of both.
To improve upon its privacy and confidentiality capabilities, Fabric has added support for private data and is working on zero knowledge proofs (ZKP) available in the future. More on this as it becomes available.

Pluggable Consensus
The process of keeping the ledger transactions synchronized across the network — to ensure that ledgers update only when transactions are approved by the appropriate participants, and that when ledgers do update, they update with the same transactions in the same order — is called consensus.
In the currently available releases, Fabric offers a CFT ordering service implemented with Kafka and Zookeeper. In subsequent releases, Fabric will deliver a Raft consensus ordering service implemented with etcd/Raft and a fully decentralized BFT ordering service.

Consensus
Transactions must be written to the ledger in the order in which they occur, even though they might be between different sets of participants within the network. For this to happen, the order of transactions must be established and a method for rejecting bad transactions that have been inserted into the ledger in error (or maliciously) must be put into place.
This is a thoroughly researched area of computer science, and there are many ways to achieve it, each with different trade-offs. For example, PBFT (Practical Byzantine Fault Tolerance) can provide a mechanism for file replicas to communicate with each other to keep each copy consistent, even in the event of corruption. Alternatively, in Bitcoin, ordering happens through a process called mining where competing computers race to solve a cryptographic puzzle which defines the order that all processes subsequently build upon.
Hyperledger Fabric has been designed to allow network starters to choose a consensus mechanism that best represents the relationships that exist between participants. As with privacy, there is a spectrum of needs; from networks that are highly structured in their relationships to those that are more peer-to-peer.
We’ll learn more about the Hyperledger Fabric consensus mechanisms, which currently include SOLO and Kafka.

Shared Ledger
Hyperledger Fabric has a ledger subsystem comprising two components: the world state and the transaction log. Each participant has a copy of the ledger to every Hyperledger Fabric network they belong to.
The world state component describes the state of the ledger at a given point in time. It’s the database of the ledger. The transaction log component records all transactions which have resulted in the current value of the world state; it’s the update history for the world state. The ledger, then, is a combination of the world state database and the transaction log history.
The ledger has a replaceable data store for the world state. By default, this is a LevelDB key-value store database. The transaction log does not need to be pluggable. It simply records the before and after values of the ledger database being used by the blockchain network.


------------------------------------
Hyperledger Fabric - Models

Hyperledger Fabric is an implementation of distributed ledger technology (DLT) that delivers enterprise-ready net- work security, scalability, confidentiality and performance, in a modular blockchain architecture.

This section outlines the key design features woven into Hyperledger Fabric that fulfill its promise of a comprehensive, yet customizable, enterprise blockchain solution:
• Assets — Asset definitions enable the exchange of almost anything with monetary value over the network, from whole foods to antique cars to currency futures.
• Chaincode — Chaincode execution is partitioned from transaction ordering, limiting the required levels of trust and verification across node types, and optimizing network scalability and performance.
• Ledger Features — The immutable, shared ledger encodes the entire transaction history for each channel, and includes SQL-like query capability for efficient auditing and dispute resolution.
• Privacy — Channels and private data collections enable private and confidential multi-lateral transactions that are usually required by competing businesses and regulated industries that exchange assets on a common net- work.
• Security & Membership Services — Permissioned membership provides a trusted blockchain network, where participants know that all transactions can be detected and traced by authorized regulators and auditors.
• Consensus — A unique approach to consensus enables the flexibility and scalability needed for the enterprise.

Assets
Assets can range from the tangible (real estate and hardware) to the intangible (contracts and intellectual property). Hyperledger Fabric provides the ability to modify assets using chaincode transactions.
Assets are represented in Hyperledger Fabric as a collection of key-value pairs, with state changes recorded as trans- actions on a Channel ledger. Assets can be represented in binary and/or JSON form.
You can easily define and use assets in your Hyperledger Fabric applications using the Hyperledger Composer tool.

Ledger Features
The ledger is comprised of a blockchain (‘chain’) to store the immutable, sequenced record in blocks, as well as a state database to maintain current fabric state. There is one ledger per channel. Each peer maintains a copy of the ledger for each channel of which they are a member.

Privacy
Hyperledger Fabric employs an immutable ledger on a per-channel basis, as well as chaincode that can manipulate and modify the current state of assets (i.e. update key-value pairs). A ledger exists in the scope of a channel — it can be shared across the entire network (assuming every participant is operating on one common channel) — or it can be privatized to include only a specific set of participants.

Security & Membership Services
Hyperledger Fabric underpins a transactional network where all participants have known identities. As a result, data access control can be manipulated and governed on the broader network and on channel levels. This “permissioned” notion of Hyperledger Fabric, coupled with the existence and capabilities
of channels, helps address scenarios where privacy and confidentiality are paramount concerns.

------------------------------------
Compare with Ethereum

https://medium.com/@philippsandner/comparison-of-ethereum-hyperledger-fabric-and-corda-21c1bb9442f6
https://blockchaintrainingalliance.com/blogs/news/ethereum-vs-hyperledger

Permissioned vs Permissionless Blockchains
In a permissionless blockchain, virtually anyone can participate, and every participant is anonymous. In such a context, there can be no trust other than that the state of the blockchain, prior to a certain depth, is immutable. In order to mitigate this absence of trust, permissionless blockchains typically employ a “mined” native cryptocurrency or transaction fees to provide economic incentive to offset the extraordinary costs of participating in a form of byzantine fault tolerant consensus based on “proof of work” (PoW).

Permissioned blockchains, on the other hand, operate a blockchain amongst a set of known, identified and often vetted participants operating under a governance model that yields a certain degree of trust. A permissioned blockchain provides a way to secure the interactions among a group of entities that have a common goal but which may not fully trust each other. By relying on the identities of the participants, a permissioned blockchain can use more traditional crash fault tolerant (CFT) or byzantine fault tolerant (BFT) consensus protocols that do not require costly mining.

Solution for Intellectual Property - which is better?
Thứ nhất, core của Hyperledger luôn xoay quanh permission (authorization) và đặc tính decentralized cũng bị thu hẹp lại ở phạm vi các tổ chức / doanh nghiệp. Một mạng lưới Hyperledger luôn có một network admin, người sẽ control luôn cách vận hành của network (model, biz logic, access control, ledger) nên rất là risk. Tuy nhiên sẽ phù hợp nếu có 1 hoặc nhiều tổ chức đứng ra đảm nhiệm việc tạo, chứng nhận và lưu giữ bằng chứng về quyền sở hữu thì có thể xem xét.

Với Ethereum hoặc những pure decentralized network, không có tổ chức trung tâm, mọi peer đều đồng đẳng và data sẽ không bị thay đổi dưới bất cứ hình thức nào. Nếu requirement có yêu cầu như vậy, cộng thêm ICO nữa thì Ethereum phù hợp hơn.

Hyperledger nó đi theo hướng khác, không open như Ethereum, nó ko có mining, nonce gì hết, 1 peer bị sai là nó "ngoắc" luôn, ko có temporary fork như Ethereum. Và ghê nhất là thằng network admin, nó là thằng deploy chaincode lên, mà chaincode thì có thể update luôn :D

Medicalchain for shared Electronic Health Records, Inter-Bank Settlement
Hyperledger will fit.


------------------------------------
Hyperledger Fabric Network
https://hyperledger-fabric.readthedocs.io/en/release-1.2/_images/network.diagram.1_1.png

https://hyperledger-fabric.readthedocs.io/en/release-1.2/network/network.html
Hyperledger Fabric Network Components
A network consists of:
• Ledgers (one per channel – comprised of the blockchain and the state database)
• Smart contract(s) (aka chaincode)
• Peer nodes
• Ordering service(s)
• Channel(s)
• Fabric Certificate Authorities
Consumers of Network Services
• Client applications owned by organizations
• Clients of Blockchain network administrators


------------------------------------
Peers and Orderers
https://hyperledger-fabric.readthedocs.io/en/release-1.2/peers/peers.html


------------------------------------
Transaction flow:
https://www.youtube.com/watch?v=2_RgCfjunEU
https://hyperledger-fabric.readthedocs.io/en/release-1.2/txflow.html


------------------------------------------------------------------------
------------------- Hyperledger Fabric Development ---------------------
------------------------------------------------------------------------

------------------------------------
Hyperledger Fabric Big Picture
Environment/tooling/infrastructure
Slide...

Development Process
Slide...

Development Big Picture
Slide...

------------------------------------
Business Network
https://hyperledger.github.io/composer/latest/business-network/businessnetworkdefinition
The Business Network Definition is a key concept of the Hyperledger Composer programming model.
https://hyperledger.github.io/composer/latest/assets/img/BusinessNetworkFiles.svg
Business Network Definitions are composed of:
a set of model files
a set of JavaScript files
an Access Control file
The model files defined the business domain for a business network, while the JavaScript files contain transaction processor functions. The transaction processor functions run on a Hyperledger Fabric and have access to the asset registries that are stored in the world state of the Hyperledger Fabric blockchain.
The model files are typically created by business analysts, as they define the structure and relationships between model elements: assets, participants and transactions.
The JavaScript files are typically created by developers who are implementing business requirements provided by business analysts.
The Access Control file contains a set of access control rules that define the rights of the different participants in the business network.
Once defined, a Business Network Definition can be packaged into an archive using the composer command line interface. These archives can then be deployed or updated on a Fabric, using the AdminConnection class from the composer-admin module.

A business network definition has the following layout:
models/ (optional - The set of domain models for a business network definition)
lib/ (The scripts for a business network definition are written in ES 5 JavaScript and refer to the types that are defined in the domain models for the business network)
permissions.acl (optional - The permissions for the business network)
package.json (- a human-readable description and a version number)
README.md (optional)

Sample Business Network:
https://github.com/hyperledger/composer-sample-networks


Business Network Archive (*.bna)
Before a business network definition can be deployed it must be packaged into a Business Network Archive (.bna) file. The composer archive create command is used to create a business network archive file from a business network definition folder on disk.
Once the business network archive file has been created it can be deployed to Hyperledger Fabric using the composer network install command followed by a composer network start command.


Business Network Card = Account to a network
https://hyperledger.github.io/composer/latest/playground/id-cards-playground
A Business Network Card provides all of the information needed to connect to a blockchain business network. It is only possible to access a blockchain Business Network through a valid Business Network Card. A Business Network Card contains and Identity for a single Participant within a deployed business network. You can have multiple Business Network Cards for a single deployed Business Network, where those Business Network Cards belong to multiple Participants.

Example:
https://hyperledger.github.io/composer/latest/playground/images/id-card.png
Here is a Business Network Card that may be used to connect to the business network named 'my-business-network' using the Identity 'New User'

Business Network Card can then be exported and shared with others, allowing them to connect to the business network using the issued identity.


------------------------------------
Peer/Network/Channel Admin?

There are two levels of security with Hyperledger Composer:
- Hyperledger Fabric administrator
- Business network administrator
The administrator for your local Hyperledger Fabric is the Peer Administrator (or PeerAdmin for short), which you created when you installed the local Hyperledger Fabric. Every business network should have an administrator as well, which is created when the network is deployed by the Hyperledger Fabric administrator. Authentication for both is handled using ID Cards, which you'll learn about next.
In a development installation, such as the one on your computer, the PeerAdmin ID card is created when you install the local Hyperledger Fabric (PeerAdmin@hlfv1)
When the PeerAdmin deploys your network to the Hyperledger Fabric, an ID card is issued to the business network administrator

The PeerAdmin is a special role reserved for functions such as:
- Deploying business networks
- Creating, issuing, and revoking ID cards for business network admins
The business network admin is a special role reserved for functions such as:
- Updating the running business network
- Querying the various registries (participant, identity, and so forth)
- Creating, issuing, and revoking ID cards for participants in the business network

Peer Admin?
https://www.ibm.com/developerworks/cloud/library/cl-deploy-interact-extend-local-blockchain-network-with-hyperledger-composer/index.html

PeerAdmin identity, with privileges to install chaincode to the peer as well as start chaincode on the composerchannel channel
cd $COMPOSER_ROOT/fabric-dev-servers
./downloadFabric.sh
./startFabric.sh
./createPeerAdminCard.sh

Channel
Is the concept of Hyperledger Fabric (See Hyperledger Fabric Network)
Business Network or Programming Model is the concept of Hyperledger Composer

- Create Business Network model
https://ibm-blockchain.github.io/develop/tutorials/developer-tutorial.html
(That tutorial will deploy Business Network model to channel called composerchannel)


------------------------------------
Hyperledger Fabric Environment Setup

Setup Fabric
Develop model, chaincode
REST Server
REST Client

Step by step:
- Installing IBM Blockchain Platform: Develop:
https://ibm-blockchain.github.io/develop/installing/installing-index
- Deploying a IBM Blockchain Platform: Develop blockchain business network to Hyperledger Fabric for a single organization
https://ibm-blockchain.github.io/develop/tutorials/deploy-to-fabric-single-org
- Developing Business Networks
https://ibm-blockchain.github.io/develop/business-network/business-network-index


--------------------------------------
Hyperledger Composer
	https://hyperledger.github.io/composer/latest/

Hyperledger Fabric Client SDK
	https://hyperledger-fabric.readthedocs.io/en/release-1.1/fabric-sdks.html
	https://fabric-sdk-node.github.io/
	https://github.com/hyperledger/fabric-sdk-java
	
Hyperledger Fabric SDKs vs Hyperledger Composer:
	https://blog.selman.org/2017/07/08/getting-started-with-blockchain-development/
	1) Hyperledger Fabric v1.1 supports writing chaincode in two languages: Golang and JavaScript via Node.js
	If you want to do all of the heavy lifting yourself, you can write straight chaincode.
	2) Hyperledger Composer provides a higher-level model-driven language for developing smart contracts. It currently only allows deployment of these artifacts to Hyperledger Fabric. It also happens to support writing functions in JavaScript as well.
	So if you want to start from a higher-level model-driven approach, Hyperledger Composer is the way to go. If you want to write all of the plumbing yourself or use very low-level chaincode features, then using chaincode itself is the way to go.
	
	Hyperledger Composer is both an application development framework and set of powerful tools which simplifies and expedites the creation of blockchain applications and smart contracts that are ultimately executed on the Hyperledger Fabric blockchain. Composer has its own runtime, that is generic chaincode and hosts and interprets the business network deployed - so your smart contract need only use Javascript, not chaincode in Go a (which is Fabric's domain) s you mentioned. It also has a modeling facility to create your business network model and to define such controls as Access Control lists and queries to be executed.

Hyperledger Composer Playground
	http://composer-playground.mybluemix.net/
	https://ibm-blockchain.github.io/develop/tutorials/playground-tutorial


Hyperledger Composer CLI
	https://hyperledger.github.io/composer/latest/reference/commands

Hyperledger Composer REST Server
	https://hyperledger.github.io/composer/latest/reference/rest-server

Hyperledger Composer REST Client
	https://hyperledger.github.io/composer/latest/applications/web


Modeling language (*.cto)
	https://hyperledger.github.io/composer/latest/reference/cto_language

Chaincode (*.js)
	https://hyperledger-fabric.readthedocs.io/en/release-1.2/chaincode4ade.html

Access Control List (.acl)
	https://ibm-blockchain.github.io/develop/tutorials/acl-trading

Authentication with Google Oauth2
https://ibm-blockchain.github.io/develop/tutorials/google_oauth2_rest

Writing Node.js Applications
https://hyperledger.github.io/composer/latest/applications/node

Testing
	Mocha, chai
	https://hyperledger.github.io/composer/latest/business-network/testing

Deploy
	https://hyperledger.github.io/composer/latest/business-network/bnd-deploy
	https://hyperledger.github.io/composer/latest/tutorials/deploy-to-fabric-single-org

Advanced:

Network setup in details for Network Operator:
- Building Your First Network
https://hyperledger-fabric.readthedocs.io/en/release-1.2/build_network.html
- Adding an Org to a Channel
https://hyperledger-fabric.readthedocs.io/en/release-1.2/channel_update_tutorial.html
- Upgrading Your Network Components
https://hyperledger-fabric.readthedocs.io/en/release-1.2/upgrading_your_network_tutorial.html
- Operations Guides
https://hyperledger-fabric.readthedocs.io/en/release-1.2/ops_guide.html	

Architecture reference:
https://hyperledger-fabric.readthedocs.io/en/release-1.2/architecture.html
- Architecture Explained
- Transaction Flow
- Hyperledger Fabric CA's User Guide
- Hyperledger Fabric SDKs
- Service Discovery
- Channels
- Capability Requirements
- CouchDB as the State Database
- Peer channel-based event services
- Private Data
- Read-Write set semantics
- Gossip data dissemination protocol

Glossary
https://hyperledger-fabric.readthedocs.io/en/release-1.2/glossary.html

2018/11/28
----------------------
Hyperledger Fabric SDK, Chaincode language, Hyperledger Composer language, Shell script
 
I. Hyperledger Fabric SDK
https://hyperledger-fabric.readthedocs.io/en/release-1.3/fabric-sdks.html
The Hyperledger Fabric SDK provides a powerful API to interact with a Hyperledger Fabric blockchain.
 
Hyperledger Fabric SDK for Node.js
https://fabric-sdk-node.github.io/release-1.3/index.html
The Hyperledger Fabric SDK for Node.js provides a powerful API to interact with a Hyperledger Fabric blockchain. The SDK is designed to be used in the Node.js JavaScript runtime.
 
Overview
Applications can be developed to interact with the blockchain network on behalf of the users. APIs are available to:
    create channels
    ask peer nodes to join the channel
    install chaincodes in peers
    instantiate chaincodes in a channel
    invoke transactions by calling the chaincode
    query the ledger for transactions or blocks
...
 
II. Shell script:
For example: join-channel.sh: ask peer nodes to join the channel
peer channel join -o $ORDERER_ADDRESS -b $GENESIS_BLOCK
It is using native peer binary command to setting peer to join the channel
 
III. Chaincode language
https://medium.com/swlh/hyperledger-chapter-8-what-is-hyperledger-fabric-chaincode-a74778dff2ae
https://www.npmjs.com/package/fabric-shim
https://fabric-shim.github.io/release-1.3/index.html
https://blog.selman.org/2017/07/08/getting-started-with-blockchain-development/ (Coding for Fabric)
https://hyperledger-fabric.readthedocs.io/en/latest/chaincode4ade.html
Chaincode is a program (smart contract) that is written to read and update the ledger state. All the business logic is inside the chaincode.
Quick High Level Overview:
    Peer can be part of one or more channel
    Every channel has a separate ledger
    Every Channel has one or more chain codes
    Every Chain code has a different endorsement policy
    Chaincode must be part of a channel. As the ledger is part of a channel. One channel can have as many chaincodes as possible.
    Chaincode must be installed in each peer that is part of the channel and instantiated.
    When a Chaincode gets instantiated a policy (endorsing) has to be defined. [consensus: before a transaction can be recorded in the ledger only if a rule is met]
 
Chaincode Key APIs
An important interface that you can use when writing your chaincode is defined by Hyperledger Fabric —
    ChaincodeStub
    ChaincodeStubInterface
 
The key APIs for chaincode include:
    func (stub *ChaincodeStub) GetState(key string) ([]byte, error)
    func (stub *ChaincodeStub) PutState(key string, value []byte) error
    func (stub *ChaincodeStub) DelState(key string) error
 
IV. Hyperledger Composer language
https://blog.selman.org/2017/03/01/introduction-to-fabric-composer/
NOTE: Business Network, Card are the concepts of Composer
https://blog.selman.org/2017/07/08/getting-started-with-blockchain-development/ (Coding for Composer)
Hyperledger Composer is a set of abstractions, tools and APIs to model, build, integrate and deploy a blockchain solution (a business network archive). Composer business network archives may be deployed to Hyperledger Fabric for execution.
So, Composer RUNS ON Fabric. Either can be used to implement a blockchain solution, however the level of abstraction, tools and languages used are quite different. Internally the Composer APIs map down to the underlying Fabric APIs – this access is managed by the Composer runtime however, which can provide a range of services that ease application development

----------------------------------------
Hyperledger Fabric Key Concepts:
https://hyperledger-fabric.readthedocs.io/en/release-1.3/key_concepts.html

I. Identity
Having a valid credit card is not enough — it must also be accepted by the store! PKIs and MSPs work together in the same way — a PKI provides a list of identities, and an MSP says which of these are members of a given organization that participates in the network.

What are PKIs?
A public key infrastructure (PKI) is a collection of internet technologies that provides secure communications in a network. It’s PKI that puts the S in HTTPS — and if you’re reading this documentation on a web browser, you’re probably using a PKI to make sure it comes from a verified source.

There are four key elements to PKI:
	Digital Certificates
	Public and Private Keys
	Certificate Authorities
	Certificate Revocation Lists
	
CAs are a common part of internet security protocols, and you’ve probably heard of some of the more popular ones: Symantec (originally Verisign), GeoTrust, DigiCert, GoDaddy, and Comodo, among others.

Root CAs, Intermediate CAs and Chains of Trust
A chain of trust is established between a Root CA and a set of Intermediate CAs as long as the issuing CA for the certificate of each of these Intermediate CAs is either the Root CA itself or has a chain of trust to the Root CA.

Fabric CA
It’s because CAs are so important that Fabric provides a built-in CA component to allow you to create CAs in the blockchain networks you form. This component — known as Fabric CA is a private root CA provider capable of managing digital identities of Fabric participants

Now that you’ve seen how a PKI can provide verifiable identities through a chain of trust, the next step is to see how these identities can be used to represent the trusted members of a blockchain network. That’s where a Membership Service Provider (MSP) comes into play — it identifies the parties who are the members of a given organization in the blockchain network.

II. MSP (Membership Service Provider)
MSPs appear in two places in a blockchain network: channel configuration (channel MSPs), and locally on an actor’s premise (local MSP)

Local MSPs are defined for clients (users) and for nodes (peers and orderers). Node local MSPs define the permissions for that node (who the peer admins are, for example). The local MSPs of the users allow the user side to authenticate itself in its transactions as a member of a channel (e.g. in chaincode transactions), or as the owner of a specific role into the system (an org admin, for example, in configuration transactions).

Every node and user must have a local MSP defined

Channel MSPs define administrative and participatory rights at the channel level
Every organization participating in a channel must have an MSP defined for it. Peers and orderers on a channel will all share the same view of channel MSPs, and will therefore be able to correctly authenticate the channel participants. This means that if an organization wishes to join the channel, an MSP incorporating the chain of trust for the organization’s members would need to be included in the channel configuration. Otherwise transactions originating from this organization’s identities will be rejected.

III. PBFT (Practical Byzantine Fault Tolerance)
https://viblo.asia/p/bai-toan-cac-vi-tuong-byzantine-va-ung-dung-trong-blockchain-jvEla4vmZkw



--------------------------------------------
Participants and identities
https://hyperledger.github.io/composer/latest/managing/participantsandidentities
--------------------------------------------
 
-- A Participant is an actor in a business network. A participant might be an individual an organization. A participant can create assets, and also exchange assets with other participants. A participant works with assets by submitting transactions.
-- A participant has a set of Identity documents that can be validated to prove the identity of that participant. 
 
-- Define model in Business Network Definition
namespace net.biz.digitalPropertyNetwork
 
participant Person identified by personId {
  o String personId
  o String firstName
  o String lastName
}
 
-- Add a new instance of a participant to a participant registry
composer participant add -c admin@network -d '{"$class":"net.biz.digitalPropertyNetwork.Person","personId":"mae@biznet.org","firstName":"Mae","lastName":"Smith"}'
https://hyperledger.github.io/composer/latest/reference/composer.participant.add.html
 
-- Issue Identity for Participant
composer identity issue -c admin@network -f maeid1.card -u maeid1 -a "resource:net.biz.digitalPropertyNetwork.Person#mae@biznet.org"
https://hyperledger.github.io/composer/latest/reference/composer.identity.issue.html
 
-- Imports a card which has already been created into your local wallet.
composer card import -f maeid1@network.card
https://hyperledger.github.io/composer/latest/reference/composer.card.import.html
 
-- Test
composer network ping -c maeid1@network
 
-- Interacting with Hyperledger Fabric
https://hyperledger.github.io/composer/latest/managing/connector-information


------------------------------------------
Deploying to a single organization Hyperledger Fabric
https://hyperledger.github.io/composer/latest/tutorials/deploy-to-fabric-single-org
------------------------------------------
 
Organization Admin:
The organization Org1 is configured with a user named Admin@org1.example.com. This user is an administrator. Administrators for an organization have the permission to install the code for a blockchain business network onto their organization's peers, and can also have the permission to start the blockchain business network, depending on configuration.
 
Start Fabric + Organization Admin, then create and start Channel named composerchannel. And let peer0.org1.example.com join the channel.
 
Then create connection.json profile
 
Creating a business network card for the Hyperledger Fabric administrator
composer card create -p connection.json -u PeerAdmin -c Admin@org1.example.com-cert.pem -k 114aab0e76bf0c78308f89efc4b8c9423e31568da0c340ca187a9b17aa9a4457_sk -r PeerAdmin -r ChannelAdmin
https://hyperledger.github.io/composer/latest/reference/composer.card.create.html
 
(Other Composer CLI Command Reference)
https://hyperledger.github.io/composer/latest/reference/commands
 
Importing the business network card for the Hyperledger Fabric administrator
composer card import -f PeerAdmin@fabric-network.card
 
Installing the Hyperledger Composer business network onto the Hyperledger Fabric peer nodes
(that you specified in the connection profile file)
composer network install -c PeerAdmin@fabric-network -a tutorial-network@0.0.1.bna
 
Starting the blockchain business network
composer network start --networkName tutorial-network --networkVersion 0.0.1 -A admin -S adminpw -c PeerAdmin@fabric-network
When a blockchain business network is deployed, you must create at least one participant who will be a blockchain business network administrator. This participant is responsible for onboarding other participants into the blockchain business network. Here, we are specifying that we want to create a single blockchain business network administrator called admin.
This specifies that our blockchain business network administrator admin will use an enrollment secret of adminpw to request a certificate and private key from the CA (Certificate Authority).
 

Importing the business network card for the business network administrator
composer card import -f admin@tutorial-network.card
 
Testing the connection to the blockchain business network
composer network ping -c admin@tutorial-network


------------------------------------------
Deploying to a multi-organization Hyperledger Fabric
https://hyperledger.github.io/composer/latest/tutorials/deploy-to-fabric-multi-org
------------------------------------------
Basically, the fundamental steps are the same as in case of single organization. Except:
We need to install BNA on both Org
Defining the endorsement policy
A running business network has an endorsement policy, which defines the rules around which organizations must endorse transactions before they can be committed to the blockchain. By default, a business network is deployed with an endorsement policy that states that only one organization has to endorse a transaction before it can be committed to the blockchain.
In real world blockchain business networks, multiple organizations will want to ensure that they endorse transactions before they can be committed to the blockchain, and so the default endorsement policy is not suitable. Instead, you can specify a custom endorsement policy when you start a business network.
https://hyperledger-fabric.readthedocs.io/en/release-1.3/endorsement-policies.html
 
When the business network is started, the certificates (the public part of the identity) for all of the business network administrators must be passed to the organization performing the commands to start the business network
 
Retrieving business network administrator certificates for Org1 (the same for Org2)
composer identity request -c PeerAdmin@byfn-network-org1 -u admin -s adminpw -d alice
 
Starting the business network
composer network start -c PeerAdmin@byfn-network-org1 -n trade-network -V 0.1.14 -o endorsementPolicyFile=/tmp/composer/endorsement-policy.json -A alice -C alice/admin-pub.pem -A bob -C bob/admin-pub.pem


